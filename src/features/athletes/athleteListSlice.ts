import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
import { fetchAthletes } from './getAthleteListApi';
import { Athlete } from './athletes';
import { FilterValues } from '../../components/layout/FilterPanel';



export interface AthleteList {
  athleteList:  Array<Athlete>;
  status:'loading'|'idle'|'failed';
}

const initialState: AthleteList = {
  athleteList : [],
  status:'idle'
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const filterAthletes = createAsyncThunk(
  'athletes/fetchAthletes',
  async (filter: FilterValues) => {
    const response = await fetchAthletes(filter);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const athleteListSlice = createSlice({
  name: 'athletesList',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    

   
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(filterAthletes.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(filterAthletes.fulfilled, (state, action) => {
        state.status = 'idle';
        state.athleteList = [...action.payload];
        console.table(state.athleteList);
      })
      .addCase(filterAthletes.rejected, (state) => {
        state.status = 'failed';
      });
  },
});



// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectAthletes = (state: RootState) => state.athletes.athleteList;



export default athleteListSlice.reducer;
